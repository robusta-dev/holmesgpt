user_prompt: "The payment-api pod in namespace app-100 had issues on August 2, 2025 around 13:45 UTC. What happened?"

expected_output:
  - The payment-api pod experienced failures caused by database connection pool exhaustion

#  - The issue occurred on August 2, 2025 between 13:45-14:45 UTC and lasted for about 1 hour
#  - Health checks at /healthz endpoint failed because they couldn't acquire database connections
#  - Logs show "ConnectionPoolExhausted" errors and "Failed to acquire database connection - pool exhausted"

tags:
  - logs
  - kubernetes
  - easy

port_forwards:
  - namespace: app-100
    service: loki
    local_port: 3100
    remote_port: 3100

before_test: |
  # Create namespace
  kubectl create namespace app-100 || true

  # Deploy Loki infrastructure from shared config
  kubectl apply -f ../../shared/loki.yaml -n app-100

  # Create promtail config for this test
  kubectl apply -f promtail-config.yaml -n app-100

  # Create secret for payment-api
  kubectl create secret generic payment-api-script \
    --from-file=app.py=./app.py \
    -n app-100 --dry-run=client -o yaml | kubectl apply -f -

  # Wait for Loki to be ready
  kubectl wait --for=condition=ready pod -l app=loki -n app-100 --timeout=60s

  # Wait for Loki ingester to be ready
  for i in {1..60}; do
    if kubectl exec -n app-100 deployment/loki -- wget -q -O- http://localhost:3100/ready 2>/dev/null | grep -q "ready"; then
      break
    fi
    [ $i -eq 60 ] && echo "ERROR: Loki not ready" && exit 1
    sleep 1
  done

  # Deploy payment-api
  kubectl apply -f payment-api.yaml

  # Wait for payment-api pod to be ready
  kubectl wait --for=condition=ready pod -l app=payment-api -n app-100 --timeout=60s

  # Wait for logs to appear in Loki
  sleep 5  # Let Promtail initialize
  START_TIME=$(date +%s)
  while [ $(($(date +%s) - START_TIME)) -lt 120 ]; do
    LOG_COUNT=$(kubectl exec -n app-100 deployment/loki -- wget -q -O- 'http://localhost:3100/loki/api/v1/query_range?query={namespace="app-100"}&limit=1' 2>/dev/null | grep -o '"values"' | wc -l)
    HISTORICAL_COUNT=$(kubectl exec -n app-100 deployment/loki -- wget -q -O- 'http://localhost:3100/loki/api/v1/query_range?query={namespace="app-100"}&start=2025-08-02T13:00:00Z&end=2025-08-02T15:00:00Z&limit=1' 2>/dev/null | grep -o '"values"' | wc -l)
    ERROR_COUNT=$(kubectl exec -n app-100 deployment/loki -- wget -q -O- 'http://localhost:3100/loki/api/v1/query_range?query={namespace="app-100",level="ERROR"}&start=2025-08-02T13:00:00Z&end=2025-08-02T15:00:00Z&limit=1' 2>/dev/null | grep -o '"values"' | wc -l)

    if [ "$LOG_COUNT" -gt "0" ] && [ "$HISTORICAL_COUNT" -gt "0" ] && [ "$ERROR_COUNT" -gt "0" ]; then
      echo "Logs ready in Loki"
      exit 0
    fi
    sleep 2
  done

  echo "ERROR: Logs not found in Loki after 120s"
  exit 1

after_test: |
  kubectl delete namespace app-100 --force --grace-period=0 || true
