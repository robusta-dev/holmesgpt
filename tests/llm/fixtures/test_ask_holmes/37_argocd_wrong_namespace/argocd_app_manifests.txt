{"toolset_name": "argocd/core", "tool_name": "argocd_app_manifests", "match_params": {"app_name": "argocd/demo-app"}}
{"schema_version": "robusta:v1.0.0", "status": "success", "error": null, "return_code": 0, "url": null, "invocation": "argocd_app_manifests command", "params": {"app_name": "argocd/demo-app"}}
stdout:
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/instance: demo-app
  name: my-demoshop-namespace

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: demoshop
    app.kubernetes.io/instance: demo-app
    service: backend
  name: backend-service
  namespace: my-demoshop-namespace
spec:
  ports:
  - name: http
    port: 3003
    targetPort: 3003
  selector:
    app: demoshop
    service: backend

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: demoshop
    app.kubernetes.io/instance: demo-app
    service: checkout
  name: checkout-service
  namespace: my-demoshop-namespace
spec:
  ports:
  - name: http
    port: 3004
    targetPort: 3004
  selector:
    app: demoshop
    service: checkout

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: demoshop
    app.kubernetes.io/instance: demo-app
    service: fraud
  name: fraud-service
  namespace: my-demoshop-namespace
spec:
  ports:
  - name: http
    port: 3005
    targetPort: 3005
  selector:
    app: demoshop
    service: fraud

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: demoshop
    app.kubernetes.io/instance: demo-app
    service: auth
  name: auth-service
  namespace: my-demoshop-namespaces
spec:
  ports:
  - name: http
    port: 3006
    targetPort: 3006
  selector:
    app: demoshop
    service: auth

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: demoshop
    app.kubernetes.io/instance: demo-app
    service: auth
  name: auth-service
  namespace: my-demoshop-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demoshop
      service: auth
  template:
    metadata:
      labels:
        app: demoshop
        service: auth
    spec:
      containers:
      - command:
        - node
        - --require
        - ./dist/telemetry.js
        - ./dist/auth-service.js
        env:
        - name: TEMPO_URL
          value: http://opentelemetry-collector-agent.tt:4318/v1/traces
        - name: SERVICE_NAME
          value: auth-service
        image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/shop-app-demo:v1
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /auth/health
            port: 3006
          initialDelaySeconds: 15
          periodSeconds: 20
        name: auth
        ports:
        - containerPort: 3006
          name: http

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: demoshop
    app.kubernetes.io/instance: demo-app
    service: backend
  name: backend-service
  namespace: my-demoshop-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demoshop
      service: backend
  template:
    metadata:
      labels:
        app: demoshop
        service: backend
    spec:
      containers:
      - command:
        - node
        - --require
        - ./dist/telemetry.js
        - ./dist/backend-service.js
        env:
        - name: TEMPO_URL
          value: http://opentelemetry-collector-agent.tt:4318/v1/traces
        - name: SERVICE_NAME
          value: backend-service
        image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/shop-app-demo:v1
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /backend/health
            port: 3003
          initialDelaySeconds: 15
          periodSeconds: 20
        name: backend
        ports:
        - containerPort: 3003
          name: http
        readinessProbe:
          httpGet:
            path: /backend/health
            port: 3003
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 256Mi
      - args:
        - |
          while true; do
            curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"name":"John Doe","email":"john.doe@example.com","address":"main street","cardNumber":"1234-5678-9101-1121"}' \
            http://localhost:3003/backend/api/checkout;
            sleep 5;
          done
        command:
        - /bin/sh
        - -c
        image: curlimages/curl:7.86.0
        name: checkout-sidecar

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: demoshop
    app.kubernetes.io/instance: demo-app
    service: checkout
  name: checkout-service
  namespace: my-demoshop-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demoshop
      service: checkout
  template:
    metadata:
      labels:
        app: demoshop
        service: checkout
    spec:
      containers:
      - command:
        - node
        - --require
        - ./dist/telemetry.js
        - ./dist/checkout-service.js
        env:
        - name: TEMPO_URL
          value: http://opentelemetry-collector-agent.tt:4318/v1/traces
        - name: SERVICE_NAME
          value: checkout-service
        image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/shop-app-demo:v1
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /checkout/health
            port: 3004
          initialDelaySeconds: 15
          periodSeconds: 20
        name: checkout
        ports:
        - containerPort: 3004
          name: http

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: demoshop
    app.kubernetes.io/instance: demo-app
    service: fraud
  name: fraud-service
  namespace: my-demoshop-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demoshop
      service: fraud
  template:
    metadata:
      labels:
        app: demoshop
        service: fraud
    spec:
      containers:
      - command:
        - node
        - --require
        - ./dist/telemetry.js
        - ./dist/fraud-service.js
        env:
        - name: TEMPO_URL
          value: http://opentelemetry-collector-agent.tt:4318/v1/traces
        - name: SERVICE_NAME
          value: fraud-service
        image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/shop-app-demo:v1
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /fraud/health
            port: 3005
          initialDelaySeconds: 15
          periodSeconds: 20
        name: fraud
        ports:
        - containerPort: 3005
          name: http

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    app: demoshop
    app.kubernetes.io/instance: demo-app
    release: robusta
    role: alert-rules
  name: test-nicolas-high-latency
  namespace: my-demoshop-namespace
spec:
  groups:
  - name: demoshop.rules
    rules:
    - alert: TestHighLatencyNicolas
      annotations:
        description: The service is experiencing high latency (> 4s 90% percentile)
        summary: High latency detected in demoshop application
      expr: histogram_quantile(0.9, sum(rate(http_request_duration_seconds_bucket[5m]))
        by (le)) > 4
      labels:
        severity: warning

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app: demoshop
    app.kubernetes.io/instance: demo-app
    release: robusta
  name: demoshop-services
  namespace: my-demoshop-namespace
spec:
  endpoints:
  - interval: 15s
    path: /metrics
    port: http
  namespaceSelector:
    matchNames:
    - my-demoshop-namespace
  selector:
    matchLabels:
      app: demoshop


stderr:
