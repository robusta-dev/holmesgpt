user_prompt: "The payment-api pod in namespace app-100b had issues on August 2, 2025 around 13:45 UTC. What happened?"

expected_output:
  - Holmes cannot fetch logs because the Loki configuration uses non-standard label 'k8s_pod' instead of 'pod_name'

#  - The issue occurred on August 2, 2025 between 13:45-14:45 UTC and lasted for about 1 hour
#  - Health checks at /healthz endpoint failed because they couldn't acquire database connections
#  - Logs show "ConnectionPoolExhausted" errors and "Failed to acquire database connection - pool exhausted"

tags:
  - logs
  - kubernetes
  - medium

setup_timeout: 600  # Increased to handle Datadog init containers

port_forwards:
  - namespace: app-100b
    service: loki
    local_port: 3111
    remote_port: 3100

before_test: |
  # Create namespace with label to exclude from Datadog admission controller
  kubectl create namespace app-100b || true
  kubectl label namespace app-100b admission.datadoghq.com/enabled=false --overwrite

  # Deploy Loki infrastructure from shared config
  kubectl apply -f ../../shared/loki.yaml -n app-100b

  # Create secret for payment-api with direct push script
  kubectl create secret generic payment-api-script \
    --from-file=app-direct-push.py=./app-direct-push.py \
    -n app-100b --dry-run=client -o yaml | kubectl apply -f -

  # Wait for Loki to be ready (increased timeout for Datadog init containers)
  echo "⏳ Waiting for Loki pod to be ready (timeout 300s)"
  LOKI_POD_READY=false
  for i in {1..60}; do
    if kubectl wait --for=condition=ready pod -l app=loki -n app-100b --timeout=5s 2>/dev/null; then
      echo "✅ Loki pod is ready!"
      LOKI_POD_READY=true
      break
    else
      echo "⏳ Attempt $i/60: Loki pod not ready yet, waiting 5s..."
      sleep 5
    fi
  done

  if [ "$LOKI_POD_READY" = false ]; then
    echo "❌ Loki pod failed to become ready after 300 seconds"
    kubectl get pods -n app-100b -l app=loki
    exit 1
  fi

  # Wait for Loki ingester to be ready
  echo "⏳ Waiting for Loki ingester to be ready"
  for i in {1..60}; do
    if kubectl exec -n app-100b deployment/loki -- wget -q -O- http://localhost:3100/ready 2>/dev/null | grep -q "ready"; then
      echo "✅ Loki ingester is ready!"
      break
    fi
    [ $i -eq 60 ] && echo "ERROR: Loki ingester not ready" && exit 1
    sleep 1
  done

  # Deploy payment-api with direct Loki push
  kubectl apply -f payment-api-direct.yaml

  # Wait for payment-api deployment to be progressing
  kubectl wait --for=condition=progressing deployment/payment-api -n app-100b --timeout=120s

  # Wait for payment-api pod to be ready (increased timeout for ContainerCreating)
  kubectl wait --for=condition=ready pod -l app=payment-api -n app-100b --timeout=300s

  # Wait for logs to appear in Loki
  sleep 5  # Let Promtail initialize
  START_TIME=$(date +%s)
  while [ $(($(date +%s) - START_TIME)) -lt 240 ]; do
    LOG_COUNT=$(kubectl exec -n app-100b deployment/loki -- wget -q -O- 'http://localhost:3100/loki/api/v1/query_range?query={namespace="app-100b"}&limit=1' 2>/dev/null | grep -o '"values"' | wc -l)
    HISTORICAL_COUNT=$(kubectl exec -n app-100b deployment/loki -- wget -q -O- 'http://localhost:3100/loki/api/v1/query_range?query={namespace="app-100b"}&start=2025-08-02T13:00:00Z&end=2025-08-02T15:00:00Z&limit=1' 2>/dev/null | grep -o '"values"' | wc -l)
    ERROR_COUNT=$(kubectl exec -n app-100b deployment/loki -- wget -q -O- 'http://localhost:3100/loki/api/v1/query_range?query={namespace="app-100b",level="ERROR"}&start=2025-08-02T13:00:00Z&end=2025-08-02T15:00:00Z&limit=1' 2>/dev/null | grep -o '"values"' | wc -l)

    if [ "$LOG_COUNT" -gt "0" ] && [ "$HISTORICAL_COUNT" -gt "0" ] && [ "$ERROR_COUNT" -gt "0" ]; then
      echo "Logs ready in Loki (including ERROR logs)"
      exit 0
    fi

    # Provide progress feedback
    echo "Waiting for logs: LOG_COUNT=$LOG_COUNT, HISTORICAL_COUNT=$HISTORICAL_COUNT, ERROR_COUNT=$ERROR_COUNT"
    sleep 2
  done

  echo "ERROR: Logs not found in Loki after 240s"
  echo "Final counts: LOG_COUNT=$LOG_COUNT, HISTORICAL_COUNT=$HISTORICAL_COUNT, ERROR_COUNT=$ERROR_COUNT"
  exit 1

after_test: |
  kubectl delete namespace app-100b || true
