apiVersion: v1
kind: Secret
metadata:
  name: signup-secrets
  namespace: app-162
type: Opaque
stringData:
  database-url: "postgresql://user:pass@postgres:5432/signupdb"
  signup_service.py: |
    #!/usr/bin/env python3
    import os
    import sys
    import time
    import json
    import logging
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import urllib.request
    import urllib.error

    # Configure logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)

    class SignupHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health':
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"status": "healthy"}).encode())
            elif self.path == '/ready':
                # Check if we can connect to payments service
                try:
                    payments_url = os.getenv('PAYMENTS_SERVICE_URL', 'http://payments-service:8080')
                    response = urllib.request.urlopen(f"{payments_url}/health", timeout=5)
                    if response.status == 200:
                        self.send_response(200)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        self.wfile.write(json.dumps({"status": "ready"}).encode())
                    else:
                        self.send_response(503)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        self.wfile.write(json.dumps({"status": "not ready", "reason": "payments service unhealthy"}).encode())
                except Exception as e:
                    logger.error(f"Payments service check failed: {e}")
                    self.send_response(503)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({"status": "not ready", "reason": f"payments service unreachable: {str(e)}"}).encode())
            else:
                self.send_response(404)
                self.end_headers()

        def do_POST(self):
            if self.path == '/signup':
                try:
                    content_length = int(self.headers['Content-Length'])
                    post_data = self.rfile.read(content_length)
                    user_data = json.loads(post_data.decode('utf-8'))

                    # Simulate signup process
                    logger.info(f"Processing signup for user: {user_data.get('email', 'unknown')}")

                    # Check payments service availability
                    payments_url = os.getenv('PAYMENTS_SERVICE_URL', 'http://payments-service:8080')
                    try:
                        # Create payment intent
                        payment_data = {
                            "amount": 1000,  # $10.00 in cents
                            "currency": "usd",
                            "customer_email": user_data.get('email')
                        }

                        req = urllib.request.Request(
                            f"{payments_url}/create-payment-intent",
                            data=json.dumps(payment_data).encode(),
                            headers={'Content-Type': 'application/json'}
                        )

                        response = urllib.request.urlopen(req, timeout=10)
                        payment_response = json.loads(response.read().decode())

                        if response.status == 200:
                            self.send_response(200)
                            self.send_header('Content-type', 'application/json')
                            self.end_headers()
                            self.wfile.write(json.dumps({
                                "status": "success",
                                "message": "User registered successfully",
                                "payment_intent_id": payment_response.get('id')
                            }).encode())
                            logger.info("Signup completed successfully")
                        else:
                            raise Exception(f"Payment service returned status {response.status}")

                    except urllib.error.HTTPError as e:
                        logger.error(f"HTTP error calling payments service: {e}")
                        self.send_response(502)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        self.wfile.write(json.dumps({
                            "status": "error",
                            "message": "Payment service error",
                            "details": str(e)
                        }).encode())
                    except Exception as e:
                        logger.error(f"Error calling payments service: {e}")
                        self.send_response(502)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        self.wfile.write(json.dumps({
                            "status": "error",
                            "message": "Payment service unavailable",
                            "details": str(e)
                        }).encode())

                except Exception as e:
                    logger.error(f"Signup processing error: {e}")
                    self.send_response(500)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({
                        "status": "error",
                        "message": "Internal server error",
                        "details": str(e)
                    }).encode())
            else:
                self.send_response(404)
                self.end_headers()

    def main():
        port = int(os.getenv('PORT', 8080))
        server = HTTPServer(('0.0.0.0', port), SignupHandler)
        logger.info(f"Signup service starting on port {port}")

        try:
            server.serve_forever()
        except KeyboardInterrupt:
            logger.info("Shutting down signup service")
            server.shutdown()

    if __name__ == '__main__':
        main()
---
apiVersion: v1
kind: Secret
metadata:
  name: payments-secrets
  namespace: app-162
type: Opaque
stringData:
  database-url: "postgresql://user:pass@postgres:5432/paymentsdb"
  stripe-api-key: "sk_test_invalid_key"  # This will cause the payments service to fail
  payments_service.py: |
    #!/usr/bin/env python3
    import os
    import sys
    import time
    import json
    import logging
    from http.server import HTTPServer, BaseHTTPRequestHandler

    # Configure logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)

    class PaymentsHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health':
                # Check if Stripe API key is valid
                stripe_key = os.getenv('STRIPE_API_KEY', '')
                if not stripe_key or stripe_key == 'sk_test_invalid_key':
                    self.send_response(503)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({
                        "status": "unhealthy",
                        "reason": "Invalid Stripe API key"
                    }).encode())
                    logger.error("Health check failed: Invalid Stripe API key")
                else:
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({"status": "healthy"}).encode())
            elif self.path == '/ready':
                # Same logic as health check
                stripe_key = os.getenv('STRIPE_API_KEY', '')
                if not stripe_key or stripe_key == 'sk_test_invalid_key':
                    self.send_response(503)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({
                        "status": "not ready",
                        "reason": "Invalid Stripe API key"
                    }).encode())
                else:
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({"status": "ready"}).encode())
            else:
                self.send_response(404)
                self.end_headers()

        def do_POST(self):
            if self.path == '/create-payment-intent':
                try:
                    content_length = int(self.headers['Content-Length'])
                    post_data = self.rfile.read(content_length)
                    payment_data = json.loads(post_data.decode('utf-8'))

                    # Check Stripe API key
                    stripe_key = os.getenv('STRIPE_API_KEY', '')
                    if not stripe_key or stripe_key == 'sk_test_invalid_key':
                        logger.error("Payment intent creation failed: Invalid Stripe API key")
                        self.send_response(500)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        self.wfile.write(json.dumps({
                            "status": "error",
                            "message": "Invalid Stripe API key",
                            "details": "The Stripe API key is invalid or missing"
                        }).encode())
                        return

                    # Simulate payment intent creation
                    logger.info(f"Creating payment intent for amount: {payment_data.get('amount')}")

                    # Simulate Stripe API call failure due to invalid key
                    self.send_response(500)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({
                        "status": "error",
                        "message": "Stripe API authentication failed",
                        "details": "Invalid API key provided to Stripe"
                    }).encode())

                except Exception as e:
                    logger.error(f"Payment intent creation error: {e}")
                    self.send_response(500)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({
                        "status": "error",
                        "message": "Internal server error",
                        "details": str(e)
                    }).encode())
            else:
                self.send_response(404)
                self.end_headers()

    def main():
        port = int(os.getenv('PORT', 8080))
        server = HTTPServer(('0.0.0.0', port), PaymentsHandler)
        logger.info(f"Payments service starting on port {port}")

        # Log the Stripe API key status (without exposing the actual key)
        stripe_key = os.getenv('STRIPE_API_KEY', '')
        if not stripe_key:
            logger.warning("STRIPE_API_KEY environment variable not set")
        elif stripe_key == 'sk_test_invalid_key':
            logger.error("STRIPE_API_KEY is set to invalid test key - service will fail")
        else:
            logger.info("STRIPE_API_KEY is set (key starts with: %s...)", stripe_key[:10])

        try:
            server.serve_forever()
        except KeyboardInterrupt:
            logger.info("Shutting down payments service")
            server.shutdown()

    if __name__ == '__main__':
        main()
