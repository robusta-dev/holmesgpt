# Traffic Generator Deployment
apiVersion: v1
kind: Secret
metadata:
  name: traffic-generator-app
  namespace: app-122
type: Opaque
stringData:
  app.py: |
    import time
    import random
    import requests
    from datetime import datetime

    PAYMENT_URL = "http://payment.app-122.svc.cluster.local:8080/payment"
    ZONES = ['us-west-1', 'us-west-2', 'us-east-1', 'us-east-2']
    PROMO_CODES = ['SAVE10', 'WELCOME20', 'HOLIDAY15', 'SPECIAL25']

    def generate_traffic():
      """Continuously generate traffic to payment service"""
      print("[TRAFFIC-GEN] Starting traffic generator", flush=True)
      request_count = 0

      while True:
        request_count += 1

        # 30% chance to include promo code
        include_promo = random.random() < 0.3

        # Build request data
        data = {
          "user_id": f"user-{random.randint(1000, 9999)}",
          "zone_id": random.choice(ZONES),
          "items": [
            {
              "id": f"item-{i}",
              "price": round(random.uniform(10, 200), 2),
              "weight": round(random.uniform(0.5, 5.0), 2)
            }
            for i in range(random.randint(1, 3))
          ]
        }

        if include_promo:
          data["promo_code"] = random.choice(PROMO_CODES)

        # Log the request
        promo_status = "WITH" if include_promo else "WITHOUT"
        print(f"[TRAFFIC-GEN] Request #{request_count}: Sending request {promo_status} promo_code", flush=True)

        try:
          start_time = time.time()
          response = requests.post(PAYMENT_URL, json=data, timeout=10)
          latency = time.time() - start_time

          status = "success" if response.status_code == 200 else f"error({response.status_code})"
          print(f"[TRAFFIC-GEN] Request #{request_count}: Response status={status}, latency={latency:.2f}s", flush=True)

        except Exception as e:
          print(f"[TRAFFIC-GEN] Request #{request_count}: Error - {str(e)}", flush=True)

        # Wait 10ms to 50ms before next request
        time.sleep(random.uniform(0.01, 0.05))

    if __name__ == '__main__':
      print("[TRAFFIC-GEN] Starting...", flush=True)

      # Start generating traffic
      generate_traffic()
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traffic-generator
  namespace: app-122
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traffic-generator
  template:
    metadata:
      labels:
        app: traffic-generator
    spec:
      containers:
      - name: traffic-generator
        image: me-west1-docker.pkg.dev/robusta-development/development/python-flask-otel:2.1
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash", "-c"]
        args:
        - |
          touch /tmp/ready && \
          python /app/app.py
        volumeMounts:
        - name: app
          mountPath: /app
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        securityContext:
          capabilities:
            add:
            - SYS_PTRACE
        startupProbe:
          exec:
            command: ["cat", "/tmp/ready"]
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 60
        resources:
          requests:
            memory: "64Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: app
        secret:
          secretName: traffic-generator-app
