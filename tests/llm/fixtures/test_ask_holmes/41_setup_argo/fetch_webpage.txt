{"toolset_name":"internet","tool_name":"fetch_webpage","match_params":{"url":"https://docs.robusta.dev/master/configuration/holmesgpt/toolsets/argocd.html"}}
{"schema_version": "robusta:v1.0.0", "status": "success", "error": null, "return_code": null, "data": null, "url": null, "invocation": null, "params": {"url": "https://docs.robusta.dev/master/configuration/holmesgpt/toolsets/argocd.html"}}


Argocd \- Robusta documentation

[Skip to content](#configuration)

Argocd[Â¶](#argocd)
===================

By enabling this toolset, HolmesGPT will be able to fetch the status, deployment history,
and configuration of ArgoCD applications.

Configuration[Â¶](#configuration)
---------------------------------

This toolset requires an `ARGOCD_AUTH_TOKEN` environment variable. Generate such auth token by following
[these steps](https://argo-cd.readthedocs.io/en/latest/user-guide/commands/argocd_account_generate-token/).
You can consult the [available environment variables](https://argo-cd.readthedocs.io/en/latest/user-guide/environment-variables/)
on argocd's official documentation for the CLI.

The permissions required are below (`kubectl edit configmap argocd-rbac-cm -n argocd`). You can consult
ArgoCD's documentation on [user creation](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/)
and [permissions](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/).

```
# Ensure this data block is present in your argocd-rbac-cm configmap.
# It enables the permissions for holmes to fetch the data it needs to
# investifate argocd issues.
# -
# These permissions depend on a new user `holmesgpt` being created,
# for example using the `argocd-cm` configmap
data:
  policy.default: role:readonly
  policy.csv: |
    p, role:admin, *, *, *, allow
    p, role:admin, accounts, apiKey, *, allow
    p, holmesgpt, accounts, apiKey, holmesgpt, allow
    p, holmesgpt, projects, get, *, allow
    p, holmesgpt, applications, get, *, allow
    p, holmesgpt, repositories, get, *, allow
    p, holmesgpt, clusters, get, *, allow
    p, holmesgpt, applications, manifests, */*, allow
    p, holmesgpt, applications, resources, */*, allow
    g, admin, role:admin

```

In addition to setting permissiong and generating an auth token, you will need to tell argocd how to connect to the server.
This can be done two ways:

1. **Using port forwarding**. This is the recommended approach if your argocd is inside your Kubernetes cluster.
2. **Setting the env var** `SERVER_URL`. This is the recommended approach if your argocd is reachable through a public DNS

### 1\. Port forwarding[Â¶](#port-forwarding)

This is the recommended approach if your argocd is inside your Kubernetes cluster.

HolmesGPT needs permission to establish a port\-forward to ArgoCD. The configuration below includes that authorization.

```
holmes:
    customClusterRoleRules:
        - apiGroups: [""]
          resources: ["pods/portforward"]
          verbs: ["create"]
    additionalEnvVars:
        - name: ARGOCD_AUTH_TOKEN
          value: <your argocd auth token>
        - name: ARGOCD_OPTS
          value: "--port-forward --port-forward-namespace <your_argocd_namespace> --grpc-web"
    toolsets:
        argocd/core:
            enabled: true

```

Note

Change the namespace `--port-forward-namespace <your_argocd_namespace>` to the namespace in which your argocd service
is deployed.

The option `--grpc-web` in `ARGOCD_OPTS` prevents some connection errors from leaking into the tool responses and
provides a cleaner output for HolmesGPT.

Update your Helm values (generated\_values.yaml) with the above configuration and run a Helm upgrade:

```
helm upgrade robusta robusta/robusta --values=generated_values.yaml --set clusterName=<YOUR_CLUSTER_NAME>

```

### 2\. Server URL[Â¶](#server-url)

This is the recommended approach if your argocd is reachable through a public DNS.

Robusta Helm Chart
Holmes CLI

```
holmes:
    additionalEnvVars:
        - name: ARGOCD_AUTH_TOKEN
          value: <your argocd auth token>
        - name: ARGOCD_SERVER
          value: argocd.example.com
    toolsets:
        argocd/core:
            enabled: true

```

Update your Helm values (generated\_values.yaml) with the above configuration and run a Helm upgrade:

```
helm upgrade robusta robusta/robusta --values=generated_values.yaml --set clusterName=<YOUR_CLUSTER_NAME>

```

First create the ARGOCD\_AUTH\_TOKEN environment variable:

```
export ARGOCD_AUTH_TOKEN="<your argocd auth token>"
export ARGOCD_SERVER="argocd.example.com"

```

Then add the following to **\~/.holmes/config.yaml**, creating the file if it doesn't exist:

```
toolsets:
    argocd/core:
        enabled: true

```

To test, run:

```
holmes ask "Which argocd applications are failing and why?"

```

Capabilities[Â¶](#capabilities)
-------------------------------

The table below describes the specific capabilities provided by this toolset. HolmesGPT can decide to invoke
any of these capabilities when answering questions or investigating issues.

| Tool Name | Description |
| --- | --- |
| argocd\_app\_list | List the applications in Argocd |
| argocd\_app\_get | Retrieve information about an existing application, such as its status and configuration |
| argocd\_app\_manifests | Retrieve manifests for an application |
| argocd\_app\_resources | List resources of an application |
| argocd\_app\_diff | Display the differences between the current state of an application and the desired state specified in its Git repository |
| argocd\_app\_history | List the deployment history of an application in ArgoCD |
| argocd\_repo\_list | List all the Git repositories that ArgoCD is currently managing |
| argocd\_proj\_list | List all available projects |
| argocd\_proj\_get | Retrieves information about an existing project, such as its applications and policies |
| argocd\_cluster\_list | List all known clusters |

[Back to top](#)
