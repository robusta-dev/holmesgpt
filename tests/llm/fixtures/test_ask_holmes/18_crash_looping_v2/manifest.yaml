apiVersion: v1
kind: Namespace
metadata:
  name: app-18
---
apiVersion: v1
kind: Secret
metadata:
  name: flask-app-code
  namespace: app-18
type: Opaque
stringData:
  app.py: |
    #!/usr/bin/env python3
    import logging
    import time
    import os
    import sys
    from datetime import datetime

    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.StreamHandler(sys.stderr)
        ]
    )

    class ExpiredCertException(Exception):
        pass

    def check_certificate():
        """Simulate checking certificate and finding it expired"""
        logging.info("Starting certificate validation...")

        # Simulate some initial checks
        logging.info("Loading certificate from /certs/certificate.pem")
        time.sleep(1)

        logging.info("Parsing certificate...")
        time.sleep(1)

        logging.info("Validating cert")

        # Simulate finding an expired certificate
        cert_expiry = "2024-08-03 17:00:08"
        logging.warning("Certificate has expired. Update the ssl certificate using the '/update_certificate' API or update the config map.")
        logging.error("SSL certificate expired")

        # Force flush logs
        sys.stdout.flush()
        sys.stderr.flush()

        # Simulate crash with traceback
        try:
            raise ExpiredCertException(f"Certificate expired on {cert_expiry}")
        except ExpiredCertException as e:
            # Print traceback
            print("Traceback (most recent call last):", file=sys.stderr)
            print('  File "/app/app.py", line 41, in check_certificate', file=sys.stderr)
            print(f'    raise ExpiredCertException(f"Certificate expired on {{cert_expiry}}")', file=sys.stderr)
            print(f"ExpiredCertException: {e}", file=sys.stderr)
            sys.stderr.flush()

            # Exit with error code
            sys.exit(1)

    if __name__ == '__main__':
        logging.info("Application starting...")

        # Give Kubernetes time to set up logging
        time.sleep(2)

        # Run certificate check
        check_certificate()
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: golden-eagle
  namespace: app-18
  labels:
    app: flask
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      labels:
        app: flask
    spec:
      containers:
      - name: flask
        image: python:3.9-slim
        command: ["python", "/app/app.py"]
        ports:
        - containerPort: 5000
        volumeMounts:
        - name: app-code
          mountPath: /app
        - name: cert-volume
          mountPath: /certs/certificate.pem
          subPath: certificate.pem
        - name: key-volume
          mountPath: /certs/key.pem
          subPath: key.pem
      volumes:
      - name: app-code
        secret:
          secretName: flask-app-code
      - name: cert-volume
        secret:
          secretName: db-certs-config
          items:
          - key: certificate.pem
            path: certificate.pem
      - name: key-volume
        secret:
          secretName: db-certs-config
          items:
          - key: key.pem
            path: key.pem
---
apiVersion: v1
kind: Service
metadata:
  name: flask-service
  namespace: app-18
  labels:
    app: flask
spec:
  selector:
    app: flask
  ports:
    - protocol: TCP
      name: http
      port: 80
      targetPort: 5000
