# Checkout Service
apiVersion: v1
kind: Secret
metadata:
  name: checkout-app
type: Opaque
stringData:
  app.py: |
    import os
    import time
    import random
    import requests
    from flask import Flask, request, jsonify
    from opentelemetry import trace
    from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
    from opentelemetry.sdk.trace import TracerProvider
    from opentelemetry.sdk.trace.export import BatchSpanProcessor
    from opentelemetry.sdk.resources import Resource
    from opentelemetry.instrumentation.flask import FlaskInstrumentor
    from opentelemetry.instrumentation.requests import RequestsInstrumentor

    # Configure OpenTelemetry
    resource = Resource.create({"service.name": "checkout-service"})
    provider = TracerProvider(resource=resource)
    trace.set_tracer_provider(provider)

    otlp_exporter = OTLPSpanExporter(
        endpoint="tempo.app-113.svc.cluster.local:4317",
        insecure=True
    )
    provider.add_span_processor(BatchSpanProcessor(otlp_exporter))

    app = Flask(__name__)
    FlaskInstrumentor().instrument_app(app)
    RequestsInstrumentor().instrument()

    tracer = trace.get_tracer(__name__)

    @app.route('/health')
    def health():
        return 'OK'

    @app.route('/checkout', methods=['POST'])
    def checkout():
        with tracer.start_as_current_span("process_checkout") as span:
            data = request.json or {}

            # Extract parameters
            user_id = data.get('user_id', 'guest')
            zone_id = data.get('zone_id', 'us-west-1')
            promo_code = data.get('promo_code')
            items = data.get('items', [])

            # Add span attributes
            span.set_attribute("user.id", user_id)
            span.set_attribute("zone.id", zone_id)
            span.set_attribute("items.count", len(items))
            if promo_code:
                span.set_attribute("promo.code", promo_code)

            # Calculate shipping
            with tracer.start_as_current_span("calculate_shipping"):
                shipping_url = "http://shipping-calculator.app-113.svc.cluster.local:8081/calculate"
                shipping_data = {
                    "zone_id": zone_id,
                    "promo_code": promo_code,
                    "weight": sum(item.get('weight', 1.0) for item in items)
                }

                try:
                    response = requests.post(shipping_url, json=shipping_data, timeout=30)
                    shipping_cost = response.json().get('cost', 10.0)
                except Exception as e:
                    span.record_exception(e)
                    shipping_cost = 10.0

            # Calculate total
            subtotal = sum(item.get('price', 0) for item in items)
            total = subtotal + shipping_cost

            return jsonify({
                "order_id": f"ord-{random.randint(1000, 9999)}",
                "subtotal": subtotal,
                "shipping": shipping_cost,
                "total": total
            })

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=8080)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkout
spec:
  replicas: 1
  selector:
    matchLabels:
      app: checkout
  template:
    metadata:
      labels:
        app: checkout
    spec:
      containers:
      - name: checkout
        image: python:3.11-slim
        command: ["/bin/bash", "-c"]
        args:
        - |
          pip install flask requests opentelemetry-api opentelemetry-sdk \
            opentelemetry-instrumentation-flask opentelemetry-instrumentation-requests \
            opentelemetry-exporter-otlp-proto-grpc && \
          python /app/app.py
        volumeMounts:
        - name: app
          mountPath: /app
        ports:
        - containerPort: 8080
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: app
        secret:
          secretName: checkout-app
---
apiVersion: v1
kind: Service
metadata:
  name: checkout
spec:
  selector:
    app: checkout
  ports:
  - port: 8080
    targetPort: 8080
---
# Shipping Calculator Service
apiVersion: v1
kind: Secret
metadata:
  name: shipping-calculator-app
type: Opaque
stringData:
  app.py: |
    import os
    import time
    import psycopg2
    from flask import Flask, request, jsonify
    from opentelemetry import trace
    from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
    from opentelemetry.sdk.trace import TracerProvider
    from opentelemetry.sdk.trace.export import BatchSpanProcessor
    from opentelemetry.sdk.resources import Resource
    from opentelemetry.instrumentation.flask import FlaskInstrumentor
    from opentelemetry.instrumentation.psycopg2 import Psycopg2Instrumentor

    # Configure OpenTelemetry
    resource = Resource.create({"service.name": "shipping-calculator"})
    provider = TracerProvider(resource=resource)
    trace.set_tracer_provider(provider)

    otlp_exporter = OTLPSpanExporter(
        endpoint="tempo.app-113.svc.cluster.local:4317",
        insecure=True
    )
    provider.add_span_processor(BatchSpanProcessor(otlp_exporter))

    app = Flask(__name__)
    FlaskInstrumentor().instrument_app(app)
    Psycopg2Instrumentor().instrument()

    tracer = trace.get_tracer(__name__)

    def get_db_connection():
        return psycopg2.connect(
            host="postgres.app-113.svc.cluster.local",
            database="shipping",
            user="postgres",
            password="postgres"
        )

    @app.route('/health')
    def health():
        return 'OK'

    @app.route('/calculate', methods=['POST'])
    def calculate():
        with tracer.start_as_current_span("calculate_shipping_rate") as span:
            data = request.json or {}
            zone_id = data.get('zone_id', 'us-west-1')
            promo_code = data.get('promo_code')
            weight = data.get('weight', 1.0)

            span.set_attribute("zone.id", zone_id)
            span.set_attribute("weight", weight)
            if promo_code:
                span.set_attribute("promo.code", promo_code)

            with tracer.start_as_current_span("database_query") as db_span:
                conn = get_db_connection()
                cursor = conn.cursor()

                try:
                    if promo_code:
                        # This query will be slow - no index on (zone_id, promo_code, active)
                        query = """
                            SELECT rate_per_kg, discount_percent
                            FROM shipping_rates
                            WHERE zone_id = %s AND promo_code = %s AND active = true
                            LIMIT 1
                        """
                        db_span.set_attribute("db.statement", query)
                        cursor.execute(query, (zone_id, promo_code))
                    else:
                        # This query will be fast - uses index on zone_id
                        query = """
                            SELECT rate_per_kg, discount_percent
                            FROM shipping_rates
                            WHERE zone_id = %s AND active = true
                            LIMIT 1
                        """
                        db_span.set_attribute("db.statement", query)
                        cursor.execute(query, (zone_id,))

                    result = cursor.fetchone()
                    if result:
                        rate, discount = result
                        cost = weight * rate * (1 - discount/100)
                    else:
                        cost = weight * 5.0  # Default rate

                finally:
                    cursor.close()
                    conn.close()

            return jsonify({"cost": round(cost, 2)})

    if __name__ == '__main__':
        # Wait for Postgres to be ready
        time.sleep(10)
        app.run(host='0.0.0.0', port=8081)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping-calculator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shipping-calculator
  template:
    metadata:
      labels:
        app: shipping-calculator
    spec:
      containers:
      - name: shipping-calculator
        image: python:3.11-slim
        command: ["/bin/bash", "-c"]
        args:
        - |
          apt-get update && apt-get install -y libpq-dev gcc && \
          pip install flask psycopg2 opentelemetry-api opentelemetry-sdk \
            opentelemetry-instrumentation-flask opentelemetry-instrumentation-psycopg2 \
            opentelemetry-exporter-otlp-proto-grpc && \
          python /app/app.py
        volumeMounts:
        - name: app
          mountPath: /app
        ports:
        - containerPort: 8081
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: app
        secret:
          secretName: shipping-calculator-app
---
apiVersion: v1
kind: Service
metadata:
  name: shipping-calculator
spec:
  selector:
    app: shipping-calculator
  ports:
  - port: 8081
    targetPort: 8081
