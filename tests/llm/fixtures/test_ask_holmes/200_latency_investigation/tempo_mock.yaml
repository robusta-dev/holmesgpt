apiVersion: v1
kind: Service
metadata:
  name: tempo-mock
  namespace: app-200
spec:
  selector:
    app: tempo-mock
  ports:
    - port: 3100
      targetPort: 3100
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tempo-mock-server
  namespace: app-200
data:
  server.py: |
    from flask import Flask, request, jsonify
    import time
    import uuid
    import random

    app = Flask(__name__)

    def generate_trace_data():
        """Generate realistic trace data with patterns matching the latency issue"""
        traces = []

        # High latency traces for mobile app EU users
        for i in range(10):
            trace_id = str(uuid.uuid4()).replace('-', '')
            traces.append({
                "traceID": trace_id,
                "rootServiceName": "api-service",
                "rootTraceName": "POST /api/v2/recommendations",
                "startTimeUnixNano": str(int(time.time() - 300) * 1000000000),
                "durationMs": 3200 + random.randint(-200, 200),  # ~3.2s
                "spanSet": {
                    "spans": [
                        {
                            "spanID": f"span{i}1",
                            "operationName": "POST /api/v2/recommendations",
                            "duration": 3200000000,  # nanoseconds
                            "attributes": {
                                "http.method": "POST",
                                "http.url": "/api/v2/recommendations",
                                "http.user_agent": f"MobileApp/2.{i % 3}",
                                "http.status_code": "200",
                                "user.region": "eu-west",
                                "customer.tier": "premium"
                            }
                        },
                        {
                            "spanID": f"span{i}2",
                            "operationName": "recommendation-service.get-item",
                            "duration": 500000000,  # 500ms per call
                            "attributes": {
                                "db.system": "redis",
                                "db.operation": "GET",
                                "service.name": "recommendation-service"
                            }
                        },
                        {
                            "spanID": f"span{i}3",
                            "operationName": "recommendation-service.get-item",
                            "duration": 500000000,  # N+1 pattern
                            "attributes": {
                                "db.system": "redis",
                                "db.operation": "GET",
                                "service.name": "recommendation-service"
                            }
                        },
                        {
                            "spanID": f"span{i}4",
                            "operationName": "recommendation-service.get-item",
                            "duration": 500000000,  # N+1 pattern
                            "attributes": {
                                "db.system": "redis",
                                "db.operation": "GET",
                                "service.name": "recommendation-service"
                            }
                        }
                    ]
                }
            })

        # Normal latency traces for web users
        for i in range(20):
            trace_id = str(uuid.uuid4()).replace('-', '')
            traces.append({
                "traceID": trace_id,
                "rootServiceName": "api-service",
                "rootTraceName": "POST /api/v2/recommendations",
                "startTimeUnixNano": str(int(time.time() - 300) * 1000000000),
                "durationMs": 500 + random.randint(-50, 50),  # ~500ms
                "spanSet": {
                    "spans": [
                        {
                            "spanID": f"web{i}1",
                            "operationName": "POST /api/v2/recommendations",
                            "duration": 500000000,
                            "attributes": {
                                "http.method": "POST",
                                "http.url": "/api/v2/recommendations",
                                "http.user_agent": "Mozilla/5.0",
                                "http.status_code": "200",
                                "user.region": "us-east",
                                "customer.tier": "standard"
                            }
                        },
                        {
                            "spanID": f"web{i}2",
                            "operationName": "recommendation-service.batch-get",
                            "duration": 300000000,  # Single batch call
                            "attributes": {
                                "db.system": "redis",
                                "db.operation": "MGET",
                                "service.name": "recommendation-service"
                            }
                        }
                    ]
                }
            })

        return traces

    @app.route('/api/search', methods=['GET'])
    def search():
        """Search traces endpoint"""
        query = request.args.get('q', '')
        limit = int(request.args.get('limit', 20))

        traces = generate_trace_data()

        # Filter based on query
        if 'duration>2s' in query or 'duration>2000ms' in query:
            # Return only slow traces
            traces = [t for t in traces if t['durationMs'] > 2000]
        elif 'duration>500ms' in query:
            # Return medium and slow traces
            traces = [t for t in traces if t['durationMs'] > 500]

        if 'service.name="api-service"' in query:
            # Filter by service (all our traces are from api-service)
            pass

        # Return limited results
        traces = traces[:limit]

        return jsonify({
            "traces": traces
        })

    @app.route('/api/traces/<trace_id>', methods=['GET'])
    def get_trace(trace_id):
        """Get specific trace by ID"""
        # Generate a detailed trace
        return jsonify({
            "traceID": trace_id,
            "rootServiceName": "api-service",
            "rootTraceName": "POST /api/v2/recommendations",
            "startTimeUnixNano": str(int(time.time() - 300) * 1000000000),
            "durationMs": 3200,
            "spanSet": {
                "spans": [
                    {
                        "spanID": "root",
                        "operationName": "POST /api/v2/recommendations",
                        "startTimeUnixNano": str(int(time.time() - 300) * 1000000000),
                        "endTimeUnixNano": str(int(time.time() - 297) * 1000000000),
                        "duration": 3200000000,
                        "attributes": {
                            "http.method": "POST",
                            "http.url": "/api/v2/recommendations",
                            "http.user_agent": "MobileApp/2.0",
                            "http.status_code": "200",
                            "user.region": "eu-west",
                            "customer.tier": "premium",
                            "user.id": "user123",
                            "trace.id": trace_id
                        }
                    }
                ]
            }
        })

    @app.route('/api/v2/search/tags', methods=['GET'])
    def tags():
        """Return available span tags/attributes"""
        return jsonify({
            "scopes": [
                {
                    "name": "span",
                    "tags": [
                        "http.method",
                        "http.url",
                        "http.user_agent",
                        "http.status_code",
                        "user.region",
                        "customer.tier",
                        "user.id",
                        "service.name",
                        "db.system",
                        "db.operation"
                    ]
                },
                {
                    "name": "resource",
                    "tags": [
                        "service.name",
                        "k8s.pod.name",
                        "k8s.namespace.name",
                        "k8s.deployment.name"
                    ]
                }
            ]
        })

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=3100)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tempo-mock
  namespace: app-200
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tempo-mock
  template:
    metadata:
      labels:
        app: tempo-mock
    spec:
      containers:
      - name: server
        image: python:3.9-slim
        command: ["sh", "-c"]
        args:
          - |
            pip install flask
            python /app/server.py
        ports:
        - containerPort: 3100
        volumeMounts:
        - name: server-code
          mountPath: /app
      volumes:
      - name: server-code
        configMap:
          name: tempo-mock-server
