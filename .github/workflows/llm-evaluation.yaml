name: Evaluate LLM test cases

on:
  pull_request:
    branches: ["*"]
  push:
    branches: [master]

permissions:
  pull-requests: write
  contents: read

jobs:
  build:
    strategy:
      matrix:
        python-version: ["3.12"]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies and build
        # if you change something here, you must also change it in .github/workflows/build-binaries-and-brew.yaml
        run: |
          python -m pip install --upgrade pip setuptools pyinstaller

          curl -sSL https://install.python-poetry.org | python3 - --version 1.4.0
          poetry config virtualenvs.create false
          poetry install --no-root

      - name: Run tests
        continue-on-error: true
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          BRAINTRUST_API_KEY: ${{ secrets.BRAINTRUST_API_KEY }}
          UPLOAD_DATASET: "true"
          PUSH_EVALS_TO_BRAINTRUST: "true"
          EXPERIMENT_ID: github-${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}
        run: |
          poetry run pytest tests/llm/test_ask_holmes.py tests/llm/test_investigate.py -n 4
      - uses: actions/github-script@v7
        with:
          retries: 3
          if: always()
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              if(!context.issue || !context.issue.number) {
                // Only comment on PR if the workflow is run as part of a PR
                return
              }
              const reportContent = fs.readFileSync('evals_report.txt', 'utf8');

              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });

              const botComment = comments.data.find(comment =>
                comment.user.type === 'Bot' &&
                comment.body.includes('## Results of HolmesGPT evals')
              );

              if (botComment) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: reportContent
                });
              }
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reportContent
              });
            } catch(e) {
              console.log(e)
            }
      - name: Check test results
        if: always() && steps.tests.outputs.status != '0'
        run: exit 1
