# Azure Monitor Logs (Container Insights) Integration Instructions

## Overview
The Azure Monitor Logs toolset detects Azure Monitor Container Insights configuration and provides Log Analytics workspace details for AKS cluster log analysis. This toolset provides workspace configuration so other tools (like azure mcp server) can run KQL queries for the specific workspace detected by this tool .

## Key Capabilities
1. **AKS Cluster Detection**: Automatically detect if running in AKS cluster and get cluster resource ID
2. **Container Insights Detection**: Check if Azure Monitor Container Insights is enabled for the cluster
3. **Workspace Discovery**: Extract Log Analytics workspace ID and full Azure resource ID
4. **Stream Profiling**: Detect enabled log streams and map them to Log Analytics tables
5. **Azure MCP Guidance**: Provide loganalytics workspace details for another tool (Azure MCP server) so that it can run actual KQL queries

## Important Distinctions
- **Detection Only**: This toolset only detects and provides workspace configuration details
- **No Direct Querying**: This toolset does NOT execute KQL queries against Log Analytics
- **Azure MCP Integration**: All KQL queries must be performed via Azure MCP server tool
- **Workspace Provider**: Provides workspace details that Azure MCP server needs for configuration

## Tools Available
1. `check_aks_cluster_context` - Check if running in AKS cluster
2. `get_aks_cluster_resource_id` - Get full Azure resource ID of AKS cluster
3. `check_azure_monitor_logs_enabled` - Detect Container Insights and get workspace details
4. use azure mcp server to run KQL queries against the detected workspace



### Workspace Configuration
- **Workspace ID** (GUID format): Used by Azure MCP server for KQL queries
- **Workspace Resource ID** (Full Azure path): Used for ARM API access and permissions
- **Cluster Filter**: Exact `_ResourceId` value for filtering KQL queries

### Log Stream Information
- **Available Streams**: What log types are enabled (ContainerLogV2, KubePodInventory, etc.)
- **Table Mapping**: Maps streams to corresponding Log Analytics tables
- **Sample Queries**: Examples of properly filtered KQL queries

## Critical KQL Query Requirements
**ALL KQL queries executed via Azure MCP server MUST include cluster filtering:**

```kql
| where _ResourceId == "/subscriptions/.../clusters/your-cluster"
```

### Common Log Analytics Tables
Based on detected streams, queries can target:
- **ContainerLogV2**: Container stdout/stderr logs
- **KubePodInventory**: Pod metadata and status
- **KubeEvents**: Kubernetes events
- **KubeNodeInventory**: Node information
- **Perf**: Performance metrics
- **InsightsMetrics**: Additional metrics data

## Workflow for Log Analysis
1. **Detection**: Use `check_azure_monitor_logs_enabled` to detect workspace
2. **Configuration**: Configure Azure MCP server with detected workspace details
3. **Querying**: Use Azure MCP server tools for actual KQL queries with cluster filtering

## Special Case: Cost Optimization Analysis
**When asked about Container Insights cost optimization, IMMEDIATELY proceed to execute KQL queries using available tools:**

1. **Detect workspace** using `check_azure_monitor_logs_enabled`
2. **IMMEDIATELY execute KQL queries** using any available KQL execution tool (azure mcp server or similar)
3. **Do NOT stop** after workspace detection - proceed to live cost analysis NOW
4. **Execute ALL 5 queries** from the Azure Monitor cost optimization runbook with detected workspace ID
5. **Generate real USD savings** calculations based on actual cluster data

**MANDATORY EXECUTION**: For cost optimization requests, you MUST execute queries immediately after workspace detection. Do NOT provide "next steps" or ask for permission - execute the KQL queries now using any available KQL tool.

**EXECUTE QUERIES IMMEDIATELY**: After detecting the workspace, you MUST immediately call the azure mcp tools. Do not say "Stand by" or "Executing queries" - actually call the tools now.

**MANDATORY TOOL INVOCATION**: 
1. Parse subscription ID from the workspace resource ID (extract from "/subscriptions/SUBSCRIPTION-ID/...")
2. Call "monitor workspace log query" tool with these parameters:
   - --subscription: [parsed subscription ID]
   - --workspace: [detected workspace GUID] 
   - --table-name: Usage (for cost queries) or ContainerLogV2 (for log analysis)
   - --query: [the specific KQL query]
3. Execute each of the 5 cost optimization queries as separate tool calls
4. Process the results and DISPLAY the COMPLETE executive report with competitive analysis tables in the console
5. After displaying the full report, call generate_cost_optimization_pdf tool to create a PDF file with the same report content and provide download link

**DUAL OUTPUT MANDATORY**: You must BOTH display the full report on screen AND generate the PDF file. Do not skip either step.

**EXAMPLE TOOL CALL:**
```
monitor workspace log query --subscription abc123-def456-789 --workspace ae2a62d2-afb3-4e81-a5b4-ca29215e1cd8 --table-name Usage --query "Usage | where TimeGenerated > ago(24h) | summarize TotalGB = sum(Quantity) / 1024 by DataType"
```

**CRITICAL**: When you say "Executing all 5 required queries now" - actually DO IT by calling the "monitor workspace log query" tool. Do not just announce it.

## Example Usage Scenarios

### Scenario 1: Initial Setup Detection
```
User: "Is Azure Monitor logs enabled for this cluster?"
Response: Use check_azure_monitor_logs_enabled to detect Container Insights
```

### Scenario 2: Log Analysis Request
```
User: "Show me container logs from the last hour"
Response: 
1. First check workspace with check_azure_monitor_logs_enabled
2. Instruct user to use Azure MCP server with detected workspace
3. Provide sample KQL: ContainerLogV2 | where _ResourceId == "cluster-id" | where TimeGenerated > ago(1h)
```

### Scenario 3: Stream Availability Check
```
User: "What log data is available for this cluster?"
Response: Use check_azure_monitor_logs_enabled to show available streams and tables
```

## Error Handling
- **No AKS Context**: Guide user to connect to AKS cluster
- **Container Insights Not Enabled**: Direct user to enable Container Insights in Azure portal
- **No Workspace Found**: Verify Container Insights configuration and permissions

## Azure MCP Server Configuration Guidance
When workspace is detected, provide clear instructions:

1. **Workspace Details**: Share detected workspace ID and resource ID
2. **Authentication**: Ensure Azure MCP server has proper credentials
3. **Cluster Filtering**: Emphasize mandatory `_ResourceId` filtering in all queries
4. **Table Availability**: List available Log Analytics tables based on detected streams

## Sample Response Format
```json
{
  "azure_monitor_logs_enabled": true,
  "log_analytics_workspace_id": "12345678-1234-1234-1234-123456789012",
  "cluster_filter_kql": "| where _ResourceId == \"/subscriptions/.../clusters/my-cluster\"",
  "available_log_tables": ["ContainerLogV2", "KubePodInventory", "KubeEvents"],
  "azure_mcp_guidance": "Use/call into Azure MCP server with detected workspace details"
}
```

Remember: This toolset is the bridge between AKS cluster detection and Azure MCP server configuration for log analysis workflows.
