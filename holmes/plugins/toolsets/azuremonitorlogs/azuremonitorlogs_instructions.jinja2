# Azure Monitor Logs (Container Insights) Integration Instructions

## Overview
The Azure Monitor Logs toolset detects Azure Monitor Container Insights configuration and provides Log Analytics workspace details for AKS cluster log analysis. This toolset **DOES NOT** execute KQL queries directly - it provides workspace configuration so other tools (like azure mcp server) can run KQL queries for the specific workspace detected by this tool .

## Key Capabilities
1. **AKS Cluster Detection**: Automatically detect if running in AKS cluster and get cluster resource ID
2. **Container Insights Detection**: Check if Azure Monitor Container Insights is enabled for the cluster
3. **Workspace Discovery**: Extract Log Analytics workspace ID and full Azure resource ID
4. **Stream Profiling**: Detect enabled log streams and map them to Log Analytics tables
5. **Azure MCP Guidance**: Provide configuration details for another tool (Azure MCP server) so that it can run actual KQL queries

## Important Distinctions
- **Detection Only**: This toolset only detects and provides workspace configuration details
- **No Direct Querying**: This toolset does NOT execute KQL queries against Log Analytics
- **Azure MCP Integration**: All KQL queries must be performed via Azure MCP server tool
- **Workspace Provider**: Provides workspace details that Azure MCP server needs for configuration

## Tools Available
1. `check_aks_cluster_context` - Check if running in AKS cluster
2. `get_aks_cluster_resource_id` - Get full Azure resource ID of AKS cluster
3. `check_azure_monitor_logs_enabled` - Detect Container Insights and get workspace details

## Azure MCP Server Integration
When Container Insights is detected, this toolset provides:

### Workspace Configuration
- **Workspace ID** (GUID format): Used by Azure MCP server for KQL queries
- **Workspace Resource ID** (Full Azure path): Used for ARM API access and permissions
- **Cluster Filter**: Exact `_ResourceId` value for filtering KQL queries

### Log Stream Information
- **Available Streams**: What log types are enabled (ContainerLogV2, KubePodInventory, etc.)
- **Table Mapping**: Maps streams to corresponding Log Analytics tables
- **Sample Queries**: Examples of properly filtered KQL queries

## Critical KQL Query Requirements
**ALL KQL queries executed via Azure MCP server MUST include cluster filtering:**

```kql
| where _ResourceId == "/subscriptions/.../clusters/your-cluster"
```

### Common Log Analytics Tables
Based on detected streams, queries can target:
- **ContainerLogV2**: Container stdout/stderr logs
- **KubePodInventory**: Pod metadata and status
- **KubeEvents**: Kubernetes events
- **KubeNodeInventory**: Node information
- **Perf**: Performance metrics
- **InsightsMetrics**: Additional metrics data

## Workflow for Log Analysis
1. **Detection**: Use `check_azure_monitor_logs_enabled` to detect workspace
2. **Configuration**: Configure Azure MCP server with detected workspace details
3. **Querying**: Use Azure MCP server tools for actual KQL queries with cluster filtering

## Example Usage Scenarios

### Scenario 1: Initial Setup Detection
```
User: "Is Azure Monitor logs enabled for this cluster?"
Response: Use check_azure_monitor_logs_enabled to detect Container Insights
```

### Scenario 2: Log Analysis Request
```
User: "Show me container logs from the last hour"
Response: 
1. First check workspace with check_azure_monitor_logs_enabled
2. Instruct user to use Azure MCP server with detected workspace
3. Provide sample KQL: ContainerLogV2 | where _ResourceId == "cluster-id" | where TimeGenerated > ago(1h)
```

### Scenario 3: Stream Availability Check
```
User: "What log data is available for this cluster?"
Response: Use check_azure_monitor_logs_enabled to show available streams and tables
```

## Error Handling
- **No AKS Context**: Guide user to connect to AKS cluster
- **Container Insights Not Enabled**: Direct user to enable Container Insights in Azure portal
- **No Workspace Found**: Verify Container Insights configuration and permissions

## Azure MCP Server Configuration Guidance
When workspace is detected, provide clear instructions:

1. **Workspace Details**: Share detected workspace ID and resource ID
2. **Authentication**: Ensure Azure MCP server has proper credentials
3. **Cluster Filtering**: Emphasize mandatory `_ResourceId` filtering in all queries
4. **Table Availability**: List available Log Analytics tables based on detected streams

## Sample Response Format
```json
{
  "azure_monitor_logs_enabled": true,
  "log_analytics_workspace_id": "12345678-1234-1234-1234-123456789012",
  "cluster_filter_kql": "| where _ResourceId == \"/subscriptions/.../clusters/my-cluster\"",
  "available_log_tables": ["ContainerLogV2", "KubePodInventory", "KubeEvents"],
  "azure_mcp_guidance": "Configure Azure MCP server with detected workspace details"
}
```

Remember: This toolset is the bridge between AKS cluster detection and Azure MCP server configuration for log analysis workflows.
