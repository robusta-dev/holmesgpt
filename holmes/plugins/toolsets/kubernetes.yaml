toolsets:
  kubernetes/core:
    description: "Read access to cluster resources (excluding secrets and other sensitive data)"
    docs_url: "https://kubernetes.io/docs/home/"
    icon_url: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRPKA-U9m5BxYQDF1O7atMfj9EMMXEoGu4t0Q&s"
    tags:
      - core
    prerequisites:
      - command: "kubectl version --client"

    tools:
      - name: "kubectl_describe"
        description: >
          Run kubectl describe <kind> <name> -n <namespace>,
          call this when users ask for description,
          for example when a user asks
            - 'describe pod xyz-123'
            - 'show service xyz-123 in namespace my-ns'
        command: "kubectl describe {{ kind }} {{ name }}{% if namespace %} -n {{ namespace }}{% endif %}"

      - name: "kubectl_get_by_name"
        description: "Run `kubectl get <kind> <name> --show-labels`"
        command: "kubectl get --show-labels -o wide {{ kind }} {{ name }}{% if namespace %} -n {{ namespace }}{% endif %}"

      - name: "kubectl_get_by_kind_in_namespace"
        description: "Run `kubectl get <kind> -n <namespace> --show-labels` to get all resources of a given type in namespace"
        command: "kubectl get --show-labels -o wide {{ kind }} -n {{namespace}}"

      - name: "kubectl_get_by_kind_in_cluster"
        description: "Run `kubectl get -A <kind> --show-labels` to get all resources of a given type in the cluster"
        command: "kubectl get -A --show-labels -o wide {{ kind }}"

      - name: "kubectl_find_resource"
        description: "Run `kubectl get {{ kind }} -A --show-labels | grep {{ keyword }}` to find a resource where you know a substring of the name, IP, namespace, or labels"
        command: "kubectl get -A --show-labels -o wide {{ kind }} | grep {{ keyword }}"

      - name: "kubectl_get_yaml"
        description: "Run `kubectl get -o yaml` on a single Kubernetes resource"
        command: "kubectl get -o yaml {{ kind }} {{ name}}{% if namespace %} -n {{ namespace }}{% endif %}"

      - name: "kubectl_events"
        description: "Retrieve the events for a specific Kubernetes resource. `resource_type` can be any kubernetes resource type: 'pod', 'service', 'deployment, 'job'', 'node', etc."
        command: "kubectl events --for {{resource_type}}/{{ pod_name }} -n {{ namespace }}"

      - name: "kubectl_memory_requests_all_namespaces"
        description: "Fetch and display memory requests for all pods across all namespaces in MiB, summing requests across multiple containers where applicable and handling binary, decimal, and millibyte units correctly."
        command: |
          kubectl get pods --all-namespaces -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name,MEMORY_REQUEST:.spec.containers[*].resources.requests.memory" --no-headers | \
          awk '
            function convert_to_mib(value) {
              if (value ~ /^[0-9]+e[0-9]+$/) return (value + 0) / (1024 * 1024); # Scientific notation
              if (value ~ /m$/) return (value + 0) / (1024^2 * 1000);           # Millibytes (m)
              if (value ~ /Ei$/) return (value + 0) * 1024^6 / (1024^2);        # Binary units
              if (value ~ /Pi$/) return (value + 0) * 1024^5 / (1024^2);
              if (value ~ /Ti$/) return (value + 0) * 1024^4 / (1024^2);
              if (value ~ /Gi$/) return (value + 0) * 1024^3 / (1024^2);
              if (value ~ /Mi$/) return (value + 0);
              if (value ~ /Ki$/) return (value + 0) / 1024;
              if (value ~ /E$/) return (value + 0) * 1000^6 / (1024^2);         # Decimal units
              if (value ~ /P$/) return (value + 0) * 1000^5 / (1024^2);
              if (value ~ /T$/) return (value + 0) * 1000^4 / (1024^2);
              if (value ~ /G$/) return (value + 0) * 1000^3 / (1024^2);
              if (value ~ /M$/) return (value + 0) * 1000^2 / (1024^2);
              if (value ~ /k$/) return (value + 0) * 1000 / (1024^2);
              return (value + 0) / (1024 * 1024);                               # Default: bytes
            }
            function sum_memory(requests) {
              gsub(/^[ \t]+|[ \t]+$/, "", requests);
              if (requests == "" || requests == "<none>") return 0;
              split(requests, arr, ",");
              total = 0;
              for (i in arr) {
                if (arr[i] != "<none>") total += convert_to_mib(arr[i]);
              }
              return total;
            }
            {
              namespace = $1;
              name = $2;
              requests = $3;
              for (i=4; i<=NF; i++) {
                requests = requests " " $i;
              }
              print namespace, name, sum_memory(requests) " Mi";
            }' | sort -k3 -nr

      - name: "kubectl_memory_requests_namespace"
        description: "Fetch and display memory requests for all pods in a specified namespace in MiB, summing requests across multiple containers where applicable and handling binary, decimal, and millibyte units correctly."
        command: |
          kubectl get pods -n {{ namespace }} -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name,MEMORY_REQUEST:.spec.containers[*].resources.requests.memory" --no-headers | \
          awk '
            function convert_to_mib(value) {
              if (value ~ /^[0-9]+e[0-9]+$/) return (value + 0) / (1024 * 1024); # Scientific notation
              if (value ~ /m$/) return (value + 0) / (1024^2 * 1000);           # Millibytes (m)
              if (value ~ /Ei$/) return (value + 0) * 1024^6 / (1024^2);        # Binary units
              if (value ~ /Pi$/) return (value + 0) * 1024^5 / (1024^2);
              if (value ~ /Ti$/) return (value + 0) * 1024^4 / (1024^2);
              if (value ~ /Gi$/) return (value + 0) * 1024^3 / (1024^2);
              if (value ~ /Mi$/) return (value + 0);
              if (value ~ /Ki$/) return (value + 0) / 1024;
              if (value ~ /E$/) return (value + 0) * 1000^6 / (1024^2);         # Decimal units
              if (value ~ /P$/) return (value + 0) * 1000^5 / (1024^2);
              if (value ~ /T$/) return (value + 0) * 1000^4 / (1024^2);
              if (value ~ /G$/) return (value + 0) * 1000^3 / (1024^2);
              if (value ~ /M$/) return (value + 0) * 1000^2 / (1024^2);
              if (value ~ /k$/) return (value + 0) * 1000 / (1024^2);
              return (value + 0) / (1024 * 1024);                               # Default: bytes
            }
            function sum_memory(requests) {
              gsub(/^[ \t]+|[ \t]+$/, "", requests);
              if (requests == "" || requests == "<none>") return 0;
              split(requests, arr, ",");
              total = 0;
              for (i in arr) {
                if (arr[i] != "<none>") total += convert_to_mib(arr[i]);
              }
              return total;
            }
            {
              namespace = $1;
              name = $2;
              requests = $3;
              for (i=4; i<=NF; i++) {
                requests = requests " " $i;
              }
              print namespace, name, sum_memory(requests) " Mi";
            }' | sort -k3 -nr

      - name: "kubernetes_jq_query"
        description: >
          Use kubectl to get json for all resources of a specific kind pipe the results to jq to filter them. Do not worry about escaping the jq_expr it will be done by the system on an unescaped expression that you give. e.g. give an expression like .items[] | .spec.containers[].image | select(test("^gcr.io/") | not)
        command: kubectl get {{ kind }} --all-namespaces -o json | jq -r {{ jq_expr }}


    # NOTE: this is only possible for probes with a healthz endpoint - we do this to avoid giving the LLM generic
    # http GET capabilities which are more powerful than we want to expose
    #- name: "check_liveness_probe"
    #  description: "Run an http Kubernetes liveness probe for a given pod and return the results. Can be used to troubleshoot previous failures of the same probe assuming they fail now in the same manner."
    #  command: "kubectl get --raw '/api/v1/namespaces/{{pod_namespace}}/pods/{{pod_name}}:{{liveness_probe_port}}/healthz'"

    #- name: "kubectl_debug_node"
    #  description: "Run a command on a Kubernetes node"
    #  command: "kubectl debug node/mynode --image=ubuntu"

    #- name: "healthcheck_plugin"
    #  description: "Check why a kubernetes health probe is failing. First call get_healthcheck_details"
    #  command: "kubectl exec -n {{namespace}} {{ pod_name }} -- wget {{ url }}:{{port}}"

    # try adding your own tools here!
    # e.g. to query company-specific data or run your own commands

  kubernetes/live-metrics:
    description: "Provides real-time metrics for pods and nodes"
    docs_url: "https://kubernetes.io/docs/home/"
    icon_url: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRPKA-U9m5BxYQDF1O7atMfj9EMMXEoGu4t0Q&s"
    tags:
      - core
    tools:
      - name: "kubectl_top_pods"
        description: "Retrieves real-time CPU and memory usage for each pod in the cluster."
        command: >
          kubectl top pods -A
      - name: "kubectl_top_nodes"
        description: "Retrieves real-time CPU and memory usage for each node in the cluster."
        command: >
          kubectl top nodes

  kubernetes/kube-prometheus-stack:
    description: "Fetches prometheus definition"
    docs_url: "https://kubernetes.io/docs/home/"
    icon_url: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRPKA-U9m5BxYQDF1O7atMfj9EMMXEoGu4t0Q&s"
    tags:
      - core
    tools:
      - name: "get_prometheus_target"
        description: "Fetch the definition of a Prometheus target"
        command: 'kubectl get --raw ''/api/v1/namespaces/{{prometheus_namespace}}/services/{{prometheus_service_name}}:9090/proxy/api/v1/targets'' | jq ''.data.activeTargets[] | select(.labels.job == "{{ target_name }}")'

  kubernetes/krew-extras: # To make this work, install kube-lineage with krew
    description: "Fetches children/dependents and parents/dependencies resources using kube-lineage installed via `kubectl krew`"
    docs_url: "https://kubernetes.io/docs/home/"
    icon_url: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRPKA-U9m5BxYQDF1O7atMfj9EMMXEoGu4t0Q&s"
    tags:
      - cli
    prerequisites:
      - command: "kubectl version --client && kubectl lineage --version"
    tools:
      - name: "kubectl_lineage_children"
        description: "Get all children/dependents of a Kubernetes resource, recursively, including their status"
        command: "kubectl lineage {{ kind }} {{ name}} -n {{ namespace }}"
      - name: "kubectl_lineage_parents"
        description: "Get all parents/dependencies of a Kubernetes resource, recursively, including their status"
        command: "kubectl lineage {{ kind }} {{ name}} -n {{ namespace }} -D"

  kubernetes/kube-lineage-extras: # To make this work, build kube-lineage from source
    description: "Fetches children/dependents and parents/dependencies resources using kube-lineage"
    docs_url: "https://kubernetes.io/docs/home/"
    icon_url: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRPKA-U9m5BxYQDF1O7atMfj9EMMXEoGu4t0Q&s"
    tags:
      - cluster
    prerequisites:
      - command: "kubectl version --client && kube-lineage --version"
    tools:
      - name: "kubectl_lineage_children"
        description: "Get all children/dependents of a Kubernetes resource, recursively, including their status"
        command: "kube-lineage {{ kind }} {{ name}} -n {{ namespace }}"
      - name: "kubectl_lineage_parents"
        description: "Get all parents/dependencies of a Kubernetes resource, recursively, including their status"
        command: "kube-lineage {{ kind }} {{ name}} -n {{ namespace }} -D"
