toolsets:
- name: "kubernetes/core"
  prerequisites:
  - command: "kubectl version --client"

  tools:
  - name: "kubectl_describe"
    description: "Run kubectl describe on a Kubernetes resource"
    command: "kubectl describe {{ kind }} {{ name }}{% if namespace %} -n {{ namespace }}{% endif %}"

  - name: "kubectl_get"
    description: "Run `kubectl get <parameters go here> --show-labels`"
    command: "kubectl get --show-labels -o wide {{ kind }} {{ name}}{% if namespace %} -n {{ namespace }}{% endif %}"

  - name: "kubectl_get_all"
    description: "Run `kubectl get -A <kind> --show-labels` to get all resources of a given type in the cluster"
    command: "kubectl get -A --show-labels  -o wide {{ kind }}"

  - name: "kubectl_find_resource"
    description: "Run `kubectl get {{ kind }} -A --show-labels | grep {{ keyword }}` to find a resource where you know a substring of the name, IP, namespace, or labels"
    command: "kubectl get -A --show-labels -o wide {{ kind }} | grep {{ keyword }}"

  - name: "kubectl_get_yaml"
    description: "Run `kubectl get -o yaml` on a single Kubernetes resource"
    command: "kubectl get -o yaml {{ kind }} {{ name}}{% if namespace %} -n {{ namespace }}{% endif %}"

  - name: "kubectl_previous_logs"
    description: "Run `kubectl logs --previous` on a single Kubernetes pod. Used to fetch logs for a pod that crashed and see logs from before the crash. Never give a deployment name or a resource that is not a pod."
    command: "kubectl logs {{ name}} -n {{ namespace }} --previous"

  - name: "kubectl_logs"
    description: "Run `kubectl logs` on a single Kubernetes pod. Never give a deployment name or a resource that is not a pod."
    command: "kubectl logs {{ name}} -n {{ namespace }}"

  - name: "kubectl_logs_grep"
    description: "Search for a specific term in the logs of a single Kubernetes pod. Only provide a pod name, not a deployment or other resource."
    command: "kubectl logs {{ name }} -n {{ namespace }} | grep {{ search_term }}"

  - name: "kubectl_memory_requests_all_namespaces"
    description: "Fetch and display memory requests for all pods across all namespaces in MiB, summing requests across multiple containers where applicable and handling binary, decimal, and millibyte units correctly."
    command: |
      kubectl get pods --all-namespaces -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name,MEMORY_REQUEST:.spec.containers[*].resources.requests.memory" --no-headers | \
      awk '
        function convert_to_mib(value) {
          if (value ~ /^[0-9]+e[0-9]+$/) return (value + 0) / (1024 * 1024); # Scientific notation
          if (value ~ /m$/) return (value + 0) / (1024^2 * 1000);           # Millibytes (m)
          if (value ~ /Ei$/) return (value + 0) * 1024^6 / (1024^2);        # Binary units
          if (value ~ /Pi$/) return (value + 0) * 1024^5 / (1024^2);
          if (value ~ /Ti$/) return (value + 0) * 1024^4 / (1024^2);
          if (value ~ /Gi$/) return (value + 0) * 1024^3 / (1024^2);
          if (value ~ /Mi$/) return (value + 0);
          if (value ~ /Ki$/) return (value + 0) / 1024;
          if (value ~ /E$/) return (value + 0) * 1000^6 / (1024^2);         # Decimal units
          if (value ~ /P$/) return (value + 0) * 1000^5 / (1024^2);
          if (value ~ /T$/) return (value + 0) * 1000^4 / (1024^2);
          if (value ~ /G$/) return (value + 0) * 1000^3 / (1024^2);
          if (value ~ /M$/) return (value + 0) * 1000^2 / (1024^2);
          if (value ~ /k$/) return (value + 0) * 1000 / (1024^2);
          return (value + 0) / (1024 * 1024);                               # Default: bytes
        }
        function sum_memory(requests) {
          gsub(/^[ \t]+|[ \t]+$/, "", requests);
          if (requests == "" || requests == "<none>") return 0;
          split(requests, arr, ",");
          total = 0;
          for (i in arr) {
            if (arr[i] != "<none>") total += convert_to_mib(arr[i]);
          }
          return total;
        }
        {
          namespace = $1;
          name = $2;
          requests = $3;
          for (i=4; i<=NF; i++) {
            requests = requests " " $i;
          }
          print namespace, name, sum_memory(requests) " Mi";
        }' | sort -k3 -nr

  - name: "kubectl_memory_requests_namespace"
    description: "Fetch and display memory requests for all pods in a specified namespace in MiB, summing requests across multiple containers where applicable and handling binary, decimal, and millibyte units correctly."
    command: |
      kubectl get pods -n {{ namespace }} -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name,MEMORY_REQUEST:.spec.containers[*].resources.requests.memory" --no-headers | \
      awk '
        function convert_to_mib(value) {
          if (value ~ /^[0-9]+e[0-9]+$/) return (value + 0) / (1024 * 1024); # Scientific notation
          if (value ~ /m$/) return (value + 0) / (1024^2 * 1000);           # Millibytes (m)
          if (value ~ /Ei$/) return (value + 0) * 1024^6 / (1024^2);        # Binary units
          if (value ~ /Pi$/) return (value + 0) * 1024^5 / (1024^2);
          if (value ~ /Ti$/) return (value + 0) * 1024^4 / (1024^2);
          if (value ~ /Gi$/) return (value + 0) * 1024^3 / (1024^2);
          if (value ~ /Mi$/) return (value + 0);
          if (value ~ /Ki$/) return (value + 0) / 1024;
          if (value ~ /E$/) return (value + 0) * 1000^6 / (1024^2);         # Decimal units
          if (value ~ /P$/) return (value + 0) * 1000^5 / (1024^2);
          if (value ~ /T$/) return (value + 0) * 1000^4 / (1024^2);
          if (value ~ /G$/) return (value + 0) * 1000^3 / (1024^2);
          if (value ~ /M$/) return (value + 0) * 1000^2 / (1024^2);
          if (value ~ /k$/) return (value + 0) * 1000 / (1024^2);
          return (value + 0) / (1024 * 1024);                               # Default: bytes
        }
        function sum_memory(requests) {
          gsub(/^[ \t]+|[ \t]+$/, "", requests);
          if (requests == "" || requests == "<none>") return 0;
          split(requests, arr, ",");
          total = 0;
          for (i in arr) {
            if (arr[i] != "<none>") total += convert_to_mib(arr[i]);
          }
          return total;
        }
        {
          namespace = $1;
          name = $2;
          requests = $3;
          for (i=4; i<=NF; i++) {
            requests = requests " " $i;
          }
          print namespace, name, sum_memory(requests) " Mi";
        }' | sort -k3 -nr

  # NOTE: this is only possible for probes with a healthz endpoint - we do this to avoid giving the LLM generic 
  # http GET capabilities which are more powerful than we want to expose
  #- name: "check_liveness_probe"
  #  description: "Run an http Kubernetes liveness probe for a given pod and return the results. Can be used to troubleshoot previous failures of the same probe assuming they fail now in the same manner."
  #  command: "kubectl get --raw '/api/v1/namespaces/{{pod_namespace}}/pods/{{pod_name}}:{{liveness_probe_port}}/healthz'"

  #- name: "kubectl_debug_node"
  #  description: "Run a command on a Kubernetes node"
  #  command: "kubectl debug node/mynode --image=ubuntu"

  #- name: "healthcheck_plugin"
  #  description: "Check why a kubernetes health probe is failing. First call get_healthcheck_details"
  #  command: "kubectl exec -n {{namespace}} {{ pod_name }} -- wget {{ url }}:{{port}}"

  # try adding your own tools here!
  # e.g. to query company-specific data or run your own commands

- name: "kubernetes/live-metrics"
  tools:
  - name: "kubectl_top_pods"
    description: "Retrieves real-time CPU and memory usage for each pod in the cluster."
    command: >
      kubectl top pods -A
  - name: "kubectl_top_nodes"
    description: "Retrieves real-time CPU and memory usage for each node in the cluster."
    command: >
      kubectl top nodes

- name: "kubernetes/kube-prometheus-stack"
  tools:
  - name: "get_prometheus_target"
    description: "Fetch the definition of a Prometheus target"
    command: "kubectl get --raw '/api/v1/namespaces/{{prometheus_namespace}}/services/{{prometheus_service_name}}:9090/proxy/api/v1/targets' | jq '.data.activeTargets[] | select(.labels.job == \"{{ target_name }}\")"

- name: "kubernetes/extras" # To make this work, install kube-lineage with krew
  prerequisites:
    - command: "kubectl version --client && kubectl lineage --version"
  tools:
  - name: "kubectl_lineage_children"
    description: "Get all children/dependents of a Kubernetes resource, recursively, including their status"
    command: "kubectl lineage {{ kind }} {{ name}} -n {{ namespace }}"
  - name: "kubectl_lineage_parents"
    description: "Get all parents/dependencies of a Kubernetes resource, recursively, including their status"
    command: "kubectl lineage {{ kind }} {{ name}} -n {{ namespace }} -D"

- name: "kubernetes/extras" # To make this work, build kube-lineage from source
  prerequisites:
    - command: "kubectl version --client && kube-lineage --version"
  tools:
  - name: "kubectl_lineage_children"
    description: "Get all children/dependents of a Kubernetes resource, recursively, including their status"
    command: "kube-lineage {{ kind }} {{ name}} -n {{ namespace }}"
  - name: "kubectl_lineage_parents"
    description: "Get all parents/dependencies of a Kubernetes resource, recursively, including their status"
    command: "kube-lineage {{ kind }} {{ name}} -n {{ namespace }} -D"